{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst elBtnDataStart = document.querySelector('[data-start]');\nconst elInputDateTime = document.querySelector('#datetime-picker');\nconst elData = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\n\nlet userSelectedDate = null;\nelBtnDataStart.disabled = true;\n\nflatpickr(elInputDateTime, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n\n    if (userSelectedDate.getTime() < currentDate.getTime()) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      elBtnDataStart.disabled = true;\n    } else {\n      elBtnDataStart.disabled = false;\n    }\n  },\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nelBtnDataStart.addEventListener('click', () => {\n  elInputDateTime.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const currentDate = new Date();\n    const subtTime = userSelectedDate.getTime() - currentDate.getTime();\n\n    const { days, hours, minutes, seconds } = elData;\n    const objSubtTime = convertMs(subtTime);\n\n    days.textContent = addZero(objSubtTime.days);\n    hours.textContent = addZero(objSubtTime.hours);\n    minutes.textContent = addZero(objSubtTime.minutes);\n    seconds.textContent = addZero(objSubtTime.seconds);\n\n    if (objSubtTime.seconds === 0) {\n      clearInterval(intervalId);\n      elInputDateTime.disabled = false;\n    }\n  }, 1000);\n});\n\nfunction addZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["elBtnDataStart","elInputDateTime","elData","userSelectedDate","flatpickr","selectedDates","currentDate","iziToast","convertMs","ms","days","hours","minutes","seconds","intervalId","subtTime","objSubtTime","addZero","value"],"mappings":"8IAKA,MAAMA,EAAiB,SAAS,cAAc,cAAc,EACtDC,EAAkB,SAAS,cAAc,kBAAkB,EAC3DC,EAAS,CACb,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEA,IAAIC,EAAmB,KACvBH,EAAe,SAAW,GAE1BI,EAAUH,EAAiB,CACzB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQI,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAClC,MAAMC,EAAc,IAAI,KAEpBH,EAAiB,QAAO,EAAKG,EAAY,QAAO,GAClDC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UAClB,CAAO,EACDP,EAAe,SAAW,IAE1BA,EAAe,SAAW,EAE7B,CACH,CAAC,EAED,SAASQ,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAb,EAAe,iBAAiB,QAAS,IAAM,CAC7CC,EAAgB,SAAW,GAE3B,MAAMa,EAAa,YAAY,IAAM,CACnC,MAAMR,EAAc,IAAI,KAClBS,EAAWZ,EAAiB,QAAS,EAAGG,EAAY,QAAO,EAE3D,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAKX,EACpCc,EAAcR,EAAUO,CAAQ,EAEtCL,EAAK,YAAcO,EAAQD,EAAY,IAAI,EAC3CL,EAAM,YAAcM,EAAQD,EAAY,KAAK,EAC7CJ,EAAQ,YAAcK,EAAQD,EAAY,OAAO,EACjDH,EAAQ,YAAcI,EAAQD,EAAY,OAAO,EAE7CA,EAAY,UAAY,IAC1B,cAAcF,CAAU,EACxBb,EAAgB,SAAW,GAE9B,EAAE,GAAI,CACT,CAAC,EAED,SAASgB,EAAQC,EAAO,CACtB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}